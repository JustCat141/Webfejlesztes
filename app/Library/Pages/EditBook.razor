@page "/book/edit/{id:int}"

@using Library.Models
@using Library.Services

@inject NavigationManager navManager
@inject IBookService bookService

@if (book is null)
{
	<PageTitle>Loading...</PageTitle>
	<LoadingSpinner Message="Loading..."/>
}
else
{
	<PageTitle>Edit @(book.Title)'s details</PageTitle>
	<h3>Edit <b>@(book.Title)</b>'s details</h3>

	<EditForm Model="book" OnValidSubmit="Save">
        <DataAnnotationsValidator />

        <div class="mb-3">
            <label class="form-label">Title</label>
            <input type="text" class="form-control" @bind="book.Title" />
            <ValidationMessage For="@(() => book.Title)" />
        </div>
        <div class="mb-3">
            <label class="form-label">Author</label>
            <input type="text" class="form-control" @bind="book.Author" />
            <ValidationMessage For="@(() => book.Author)" />
        </div>
        <div class="mb-3">
            <label class="form-label">Publication Year</label>
            <input type="number" class="form-control" @bind="book.PublicationYear" />
            <ValidationMessage For="@(() => book.PublicationYear)" />
        </div>
        <div class="modal-footer">
            <button type="submit" class="btn btn-primary">Save</button>
            <a href="/book/details/@book.Id" class="btn btn-secondary">Cancel</a>
        </div>
    </EditForm>
}

@code {

    [Parameter]
    public int Id { get; set; }

    private Book? book { get; set; }

    protected override async Task OnInitializedAsync()
    {
        book = await bookService.GetBookByIdAsync(Id);
    }

    private void Save()
    {
        navManager.NavigateTo($"/book/details/{book.Id}");
    }
}
