@page "/loan/library-loans/{text}"

@using Library.Models
@using Library.Services

@inject IBookService bookService
@inject ILoanService loanService

<h3>All Loans</h3>

<table class="table">
    <thead>
        <tr>
            <th>Book</th>
            <th>Loaned By</th>
            <th>Return Deadline</th>
            <th>State</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @if (loans is null)
		{
			<tr>
                <td colspan="6">
                    <LoadingSpinner Message="Fetching data, please wait..."/>
                </td>
            </tr>
        }
        else if (loans is not null && !loans.Any())
        {
            <tr>
                <td colspan="6" class="text-center">
                    Nothing to see here.
                </td>
            </tr>
        }
        else
        {
            foreach (var loan in loans)
            {
                <tr>
                    <td><a href="book/details/@loan.Book.Id" class="text-decoration-none">@loan.Book.Title</a></td>
                    <td><a href="member/details/@loan.Member.Id" class="text-decoration-none">@loan.Member.FullName</a></td>
                    <td>@loan.ReturnDueDate.ToString("yyyy. MMM dd")</td>
                    @if (loan.IsOverDue)
					{
						<td class="text-danger">Overdue</td>
					}
					else
					{
						<td class="text-success">Active</td>
					}
                    <td>
						<button class="btn btn-primary" @onclick="() => OnReturnBookButton(loan.Book.Id)">Return</button>
					</td>
                </tr>
            }
        }
    </tbody>
</table>

@code {
    [Parameter]
    public string? Text { get; set; }

    private IEnumerable<Loan>? loans { get; set; }

    protected override async Task OnInitializedAsync()
    {
        loans = await loanService.GetAllLoansAsync();
    }

    private async Task OnReturnBookButton(int id) {
        await bookService.ReturnBook(id);
        loans = await loanService.GetAllLoansAsync();
    }
}
