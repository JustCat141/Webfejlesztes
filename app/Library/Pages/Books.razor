@page "/book/library-books"

@using Library.Models
@using System.Linq;
@using Library.Services

@inject IBookService bookService

<PageTitle>Books</PageTitle>


<header>
    <h3 class="fw-bold">Library Books</h3>
    <div class="d-flex justify-content-end mb-3">
        <button class="btn btn-outline-primary me-2" @onclick="ShowAddBookModal">
            <i class="bi bi-plus-lg"></i> Add New
        </button>
    </div>
</header>


@if (showModal)
{
    <div class="modal-backdrop" style="position:fixed;top:0;left:0;width:100%;height:100%;background:rgba(0,0,0,0.5);z-index:1040;"></div>
    <div class="modal" style="display:block;position:fixed;top:20%;left:50%;transform:translate(-50%, -20%);z-index:1050;">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Create New Book</h5>
                    <button type="button" class="btn-close" @onclick="CloseModal"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="newBook" OnValidSubmit="AddBook">
                        <DataAnnotationsValidator />

                        <div class="mb-3">
                            <label class="form-label">Title</label>
                            <input type="text" class="form-control" @bind="newBook.Title" />
                            <ValidationMessage For="@(() => newBook.Title)" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Author</label>
                            <input type="text" class="form-control" @bind="newBook.Author" />
                            <ValidationMessage For="@(() => newBook.Author)" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Publication Year</label>
                            <input type="number" class="form-control" @bind="newBook.PublicationYear" />
                            <ValidationMessage For="@(() => newBook.PublicationYear)" />
                        </div>
                        <div class="modal-footer">
                            <button type="submit" class="btn btn-primary">Save</button>
                            <button type="button" class="btn btn-secondary" @onclick="CloseModal">Cancel</button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

<table class="table">
	<thead>
		<tr>
			<th>Title</th>
			<th>Author</th>
			<th>Publication Year</th>
			<th>Actions</th>
		</tr>
	</thead>
	<tbody>
		@if (books is null)
		{
			<tr>
                <td colspan="4">
                    <LoadingSpinner Message="Fetching data, please wait..."/>
                </td>
            </tr>
        }
        else if (books is not null && !books.Any())
        {
            <tr>
                <td colspan="4" class="text-center">
                    No books available.
                </td>
            </tr>
        }
        else 
		{
			@foreach (var book in books)
			{
				<tr>
                    <td>
                        <a href="/book/details/@book.Id" class="text-decoration-none" title="Show @(book.Title) details">@book.Title</a>
                    </td>
                    <td>@book.Author</td>
                    <td>@book.PublicationYear</td>
                    <td>
                        <a class="btn btn-primary" title="Edit book" href="book/edit/@book.Id">
                            <i class="bi bi-pencil-square"></i>
                        </a>
                        <a class="btn btn-outline-danger" title="Delete book">
                            <i class="bi bi-trash"></i>
                        </a>
                    </td>
                </tr>
			}
		}
	</tbody>
</table>	

@code {

    private bool showModal = false;

    private IEnumerable<Book>? books { get; set; }
    
    private Book newBook;

    protected override async Task OnInitializedAsync()
    {
        await LoadSampleDataAsync();
    }

    private async Task LoadSampleDataAsync()
    {
        books = await bookService.GetAllBooksAsync();
    }

    private void ShowAddBookModal()
    {
        newBook = new Book();
        showModal = true;
    }

    private void CloseModal()
    {
        showModal = false;
    }

    private void AddBook()
    {
        newBook.Id = int.MinValue;
        CloseModal();
    }
}
